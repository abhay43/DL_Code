## Import all liberies
import numpy as np
import pandas as pd
## Global Variables--
start = (2,0)
stop = (0,3)
rows = 3
columns = 4
reset_cell = [(1,1), (1,3)]
state = start
class env:
  def __int__(self):
    self.board = np.zeros([rows, columns])
    self.isend = False

  def get_rewards(self):
    if self.step == stop:
      return 10
    elif self.step in reset_cell:
      return -10
    else:
      return -1 

  def isEnd(self):
    if(self.state in self.reset_cell):
      self.isend = True

  def nxtStateCal(self, action):
      if action == "up":
          nxtState = (self.state[0] - 1, self.state[1])
      elif action == "down":
          nxtState = (self.state[0] + 1, self.state[1])
      elif action == "left":
          nxtState = (self.state[0], self.state[1] - 1)
      else:
          nxtState = (self.state[0], self.state[1] + 1)
      # if next state legal
      if (nxtState[0] >= 0) and (nxtState[0] <= 2):
          if (nxtState[1] >= 0) and (nxtState[1] <= 3):
            return nxtState              
      return self.state
      
  def showBoard(self):
    self.board[self.state] = 1
    for i in range(0, rows):
        print('-----------------')
        out = '| '
        for j in range(0, BOARD_COLS):
            if self.board[i, j] == 1:
                token = '*'
            if self.board[i, j] == -1:
                token = 'z'
            if self.board[i, j] == 0:
                token = '0'
            out += token + ' | '
        print(out)
    print('-----------------')

    

class Agent:
  def __init__(self):
    self.actions = ["up", "down", "left", "right"]
    self.states = []
    self.env = env()
    self.state_values = {}
    self.state_values = np.zeros([rows, columns])
    
  def choose_action(self):
    

